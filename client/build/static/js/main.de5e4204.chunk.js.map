{"version":3,"sources":["ListFunctions.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["proxy","getAllTasks","axios","get","headers","Content-Type","then","res","data","addTask","task","post","console","log","deleteTask","taskId","delete","concat","catch","err","updateTask","id","put","List","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","ev","setState","taskItem","target","value","onSubmit","preventDefault","state","getAll","onUpdate","onEdit","itemId","item","onDelete","tasks","toConsumableArray","bind","assertThisInitialized","_this2","react_default","a","createElement","className","htmlFor","type","onClick","map","i","key","href","_id","Component","App","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de5e4204.chunk.js","sourcesContent":["import axios from 'axios';\r\n//const protocol = 'https://';\r\n//const URL = window.location.hostname;\r\nconst proxy = `/api/tasks`;\r\n\r\n//All Tasks\r\nexport const getAllTasks = () => {\r\n  return axios\r\n  .get(proxy, {\r\n    headers: {'Content-Type' : 'application/json'}\r\n  })\r\n  .then(res => {\r\n    return res.data;\r\n  });\r\n}\r\n\r\n//Add Task\r\nexport const addTask = task => {\r\n  return axios\r\n  .post(proxy,\r\n    {task: task},\r\n    {headers: {'Content-Type' : 'application/json'}})\r\n  .then(res => console.log(res));\r\n}\r\n\r\n//DeleteTask\r\nexport const deleteTask = taskId => {\r\n  return axios\r\n  .delete(`${proxy}/${taskId}`, {\r\n    headers: {'Content-Type' : 'application/json'}\r\n  })\r\n  .then(res => console.log(res))\r\n  .catch(err => console.log(err));\r\n}\r\n\r\n//UpdateTask\r\nexport const updateTask = (task, id) => {\r\n  return axios\r\n  .put(`${proxy}/${id}`,\r\n    {task: task},\r\n    {headers: {'Content-Type' : 'application/json'}})\r\n  .then(res => console.log(res));\r\n}\r\n","import React, { Component } from 'react';\r\nimport { getAllTasks, addTask, deleteTask, updateTask} from '../ListFunctions';\r\n\r\nclass List extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      id: '',\r\n      taskItem: '',\r\n      tasks: []\r\n    };\r\n\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getAll();\r\n  }\r\n\r\n  onChange = ev => {\r\n    this.setState({taskItem: ev.target.value});\r\n  }\r\n\r\n  onSubmit = ev => {\r\n    ev.preventDefault();\r\n    addTask(this.state.taskItem).then(() => {\r\n      this.getAll();\r\n    });\r\n  }\r\n\r\n  onUpdate = ev => {\r\n    ev.preventDefault();\r\n    updateTask(this.state.taskItem, this.state.id).then(() => {\r\n      this.getAll();\r\n    });\r\n  }\r\n\r\n  onEdit = (itemId, item, ev) => {\r\n    ev.preventDefault();\r\n    this.setState({\r\n      id: itemId,\r\n      taskItem: item\r\n    })\r\n  }\r\n\r\n  onDelete = (id, ev) => {\r\n    ev.preventDefault();\r\n    deleteTask(id).then(() => {\r\n      this.getAll();\r\n    });\r\n  }\r\n\r\n  getAll = () => {\r\n    getAllTasks().then(data => {\r\n      this.setState({\r\n        id: '',\r\n        taskItem: '',\r\n        tasks: [...data]\r\n      }, () => console.log(this.state.tasks));\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"col-md-12\">\r\n        <form onSubmit={this.onSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"taskName\">Task Name</label>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-9\">\r\n                <input type=\"text\" className=\"form-control\" id=\"taskName\"\r\n                value={this.state.taskItem || \"\"} onChange={this.onChange.bind(this)} />\r\n              </div>\r\n              <div className=\"col-md-2\">\r\n                <button className=\"btn btn-primary\" onClick={this.onUpdate.bind(this)}>Update</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-success\" onClick={this.onSubmit.bind(this)}>Submit</button>\r\n        </form>\r\n        <h4 className=\"text-left mt-3\">Tasks List</h4>\r\n        <ul className=\"list-group mt-3\">\r\n          {this.state.tasks.map((item, i) => (\r\n            <li key={i} className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n              <span className=\"text-left\">{item.task}</span>\r\n              <div className=\"row\">\r\n                <button href=\"\" className=\"btn btn-info mr-1\" onClick={this.onEdit.bind(this, item._id, item.task)}>Edit</button>\r\n                <button href=\"\" className=\"btn btn-danger\" onClick={this.onDelete.bind(this, item._id)}>Delete</button>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\r\nimport List from './components/List';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 mx-auto\">\r\n            <h1 className=\"text-center\">Simple TODO List</h1>\r\n            <List />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}